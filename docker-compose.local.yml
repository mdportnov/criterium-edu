services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: criterium-postgres
    env_file:
      - apps/api/.env.local
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-criterium}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - "./data/var/lib/postgresql/data/pg:/var/lib/postgresql/data"
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - criterium-network

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    container_name: criterium-backend
    platform: linux/amd64
    env_file:
      - apps/api/.env.local
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      BACKEND_PORT: ${BACKEND_PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-criterium}
      JWT_SECRET: ${JWT_SECRET:-your-local-secret-key}
      JWT_EXPIRATION_TIME: ${JWT_EXPIRATION_TIME:-1d}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - criterium-network

  # Frontend Web Service
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost/api}
    container_name: criterium-frontend
    platform: linux/amd64
    env_file:
      - apps/web-ui/.env.local
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    restart: always
    depends_on:
      - backend
    networks:
      - criterium-network

networks:
  criterium-network:
    driver: bridge
    attachable: true