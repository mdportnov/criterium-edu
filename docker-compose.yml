version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-criterium}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - criterium-network

  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
      args:
        NODE_ENV: production
    image: criterium-backend:nx
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-criterium}
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - criterium-network
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
      args:
        NODE_ENV: production
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    image: criterium-frontend:nx
    ports:
      - "${WEB_PORT:-5173}:80"
    environment:
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - criterium-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  criterium-network:
    driver: bridge
