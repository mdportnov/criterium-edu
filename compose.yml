services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: criterium-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-criterium}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - criterium-network

  # Backend API Service
  backend:
    image: ${REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY_OWNER:-criterium}/${BACKEND_IMAGE:-criterium-edu-backend}:${IMAGE_TAG:-latest}
    container_name: criterium-edu-backend
    #    build:
    #      context: .
    #      dockerfile: backend.Dockerfile
    #      args:
    #        NODE_ENV: ${NODE_ENV:-production}
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-criterium}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      PORT: 3000
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    restart: unless-stopped
    networks:
      - criterium-network

  # Frontend Web Service
  frontend:
    image: ${REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY_OWNER:-criterium}/${FRONTEND_IMAGE:-criterium-edu-frontend}:${IMAGE_TAG:-latest}
    container_name: criterium-edu-frontend
    #    build:
    #      context: .
    #      dockerfile: frontend.Dockerfile
    #      args:
    #        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - criterium-network

networks:
  criterium-network:
    driver: bridge

volumes:
  postgres_data: